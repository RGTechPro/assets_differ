Index: lib/features/module_assets/data/sources/remote_asset_data_source.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:convert';\nimport 'dart:typed_data';\nimport 'package:http/http.dart' as http;\nimport 'package:assets_differ/core/utils/performance_tracker.dart';\nimport 'package:assets_differ/features/module_assets/data/models/asset_manifest.dart';\n\n/// Handles all remote data operations for assets\nclass RemoteAssetDataSource {\n  final String baseUrl = 'https://asset-differ.free.beeceptor.com';\n\n  // JSON data for version 1.0.0\n  final Map<String, dynamic> _v1Json = {\n    \"version\": \"1.0.0\",\n    \"module\": \"lobby\",\n    \"assets\": [\n      {\n        \"path\": \"assets/logo.png\",\n        \"hash\": \"abc123def\",\n        \"url\": \"https://picsum.photos/id/1011/300/200\",\n        \"priority\": 0\n      },\n      {\n        \"path\": \"assets/menu_icon.png\",\n        \"hash\": \"def456gh9\",\n        \"url\": \"https://picsum.photos/id/1020/100/100\",\n        \"priority\": 1\n      },\n      {\n        \"path\": \"assets/banner1.png\",\n        \"hash\": \"ghi789jkl\",\n        \"url\": \"https://picsum.photos/id/1038/600/300\",\n        \"priority\": 2\n      }\n    ]\n  };\n\n  // JSON data for version 2.0.0\n  final Map<String, dynamic> _v2Json = {\n    \"version\": \"1.1.0\",\n    \"module\": \"lobby\",\n    \"assets\": [\n      {\n        \"path\": \"assets/logo.png\",\n        \"hash\": \"abc123def\",\n        \"url\": \"https://picsum.photos/id/1011/300/200\",\n        \"priority\": 0\n      },\n      {\n        \"path\": \"assets/menu_icon.png\",\n        \"hash\": \"def456gh9\",\n        \"url\": \"https://picsum.photos/id/1020/100/100\",\n        \"priority\": 1\n      },\n      {\n        \"path\": \"assets/banner1.png\",\n        \"hash\": \"ghi789jkl\",\n        \"url\": \"https://picsum.photos/id/1038/600/300\",\n        \"priority\": 2\n      }\n    ]\n  };\n\n  // JSON data for version 3.0.0\n  final Map<String, dynamic> _v3Json = {\n    \"version\": \"1.2.0\",\n    \"module\": \"lobby\",\n    \"assets\": [\n      {\n        \"path\": \"assets/logo.png\",\n        \"hash\": \"abc1235efj\",\n        \"url\": \"https://picsum.photos/id/1012/300/200\",\n        \"priority\": 0\n      },\n      {\n        \"path\": \"assets/menu_icon.png\",\n        \"hash\": \"def456ghi\",\n        \"url\": \"https://picsum.photos/id/1025/100/100\",\n        \"priority\": 1\n      },\n      {\n        \"path\": \"assets/banner1.png\",\n        \"hash\": \"ghi789jkl\",\n        \"url\": \"https://picsum.photos/id/1038/600/300\",\n        \"priority\": 2\n      }\n    ]\n  };\n\n  /// Fetch asset data based on version\n  /// Returns a Future with the AssetManifest for the requested version\n  Future<AssetManifest> getRemoteManifest(String version) async {\n\n    return _getFallbackManifest(version);\n    \n    PerformanceTracker.startTracking('RemoteAssetDataSource.getRemoteManifest');\n    print('Fetching remote manifest for version: $version');\n\n    String endpoint;\n\n    // Determine the endpoint based on the version\n    switch (version) {\n      case '1.0.0':\n        endpoint = '/getRemoteManifest/v1';\n        break;\n      case '1.1.0':\n        endpoint = '/getRemoteManifest/v2';\n        break;\n      case '1.2.0':\n        endpoint = '/getRemoteManifest/v3';\n        break;\n      default:\n        endpoint = '/getRemoteManifest/v1'; // Default to latest version\n    }\n\n    final client = http.Client();\n\n    try {\n      // Make the HTTP request to the API\n      PerformanceTracker.startTracking('RemoteAssetDataSource.apiHttpRequest');\n      \n      final response = await client.get(\n        Uri.parse('$baseUrl$endpoint'),\n        headers: {'Content-Type': 'application/json'},\n      ).timeout(const Duration(seconds: 10));\n      PerformanceTracker.endTracking('RemoteAssetDataSource.apiHttpRequest');\n\n      if (response.statusCode == 200) {\n        // Parse the JSON response\n        PerformanceTracker.startTracking('RemoteAssetDataSource.parseJsonResponse');\n        final Map<String, dynamic> jsonData = json.decode(response.body);\n        final manifest = AssetManifest.fromJson(jsonData);\n        PerformanceTracker.endTracking('RemoteAssetDataSource.parseJsonResponse');\n        PerformanceTracker.endTracking('RemoteAssetDataSource.getRemoteManifest');\n        return manifest;\n      } else {\n        print('API Error: ${response.statusCode} - ${response.body}');\n        // Fallback to local JSON data if API fails\n        final manifest = _getFallbackManifest(version);\n        return manifest;\n      }\n    } catch (e) {\n      print('Network error fetching remote manifest: $e');\n      // Fallback to local JSON data if there's a network error\n      final manifest = _getFallbackManifest(version);\n      return manifest;\n    } finally {\n      client.close();\n    }\n  }\n\n  /// Fallback method to get manifest from local JSON if API fails\n  AssetManifest _getFallbackManifest(String version) {\n    print('Using fallback data for version: $version');\n    switch (version) {\n      case '1.0.0':\n        return AssetManifest.fromJson(_v1Json);\n      case '1.1.0':\n        return AssetManifest.fromJson(_v2Json);\n      case '1.2.0':\n        return AssetManifest.fromJson(_v3Json);\n      default:\n        return AssetManifest.fromJson(_v3Json);\n    }\n  }\n\n  /// Load image data from a network URL\n  Future<Uint8List> loadImageFromUrl(String imageUrl) async {\n    PerformanceTracker.startTracking('RemoteAssetDataSource.loadImageFromUrl');\n    final client = http.Client();\n    try {\n      PerformanceTracker.startTracking('RemoteAssetDataSource.imageHttpRequest');\n      final http.Response response = await client.get(Uri.parse(imageUrl))\n          .timeout(const Duration(seconds: 30));\n      PerformanceTracker.endTracking('RemoteAssetDataSource.imageHttpRequest');\n\n      if (response.statusCode == 200) {\n        return response.bodyBytes;\n      } else {\n        throw HttpException(\n            'Failed to load image. Status code: ${response.statusCode}',\n            uri: Uri.parse(imageUrl));\n      }\n    } finally {\n      client.close();\n      PerformanceTracker.endTracking('RemoteAssetDataSource.loadImageFromUrl');\n    }\n  }\n}\n\n/// Custom exception for HTTP-related errors\nclass HttpException implements Exception {\n  final String message;\n  final Uri? uri;\n\n  HttpException(this.message, {this.uri});\n\n  @override\n  String toString() => 'HttpException: $message${uri != null ? ' ($uri)' : ''}';\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/features/module_assets/data/sources/remote_asset_data_source.dart b/lib/features/module_assets/data/sources/remote_asset_data_source.dart
--- a/lib/features/module_assets/data/sources/remote_asset_data_source.dart	(revision 3ccfc8b7b62d62230f47936bf1581725191c992d)
+++ b/lib/features/module_assets/data/sources/remote_asset_data_source.dart	(date 1747115291680)
@@ -164,7 +164,7 @@
   }
 
   /// Load image data from a network URL
-  Future<Uint8List> loadImageFromUrl(String imageUrl) async {
+  Future<String> loadImageFromUrl(String imageUrl) async {
     PerformanceTracker.startTracking('RemoteAssetDataSource.loadImageFromUrl');
     final client = http.Client();
     try {
@@ -174,7 +174,7 @@
       PerformanceTracker.endTracking('RemoteAssetDataSource.imageHttpRequest');
 
       if (response.statusCode == 200) {
-        return response.bodyBytes;
+        return response.body;
       } else {
         throw HttpException(
             'Failed to load image. Status code: ${response.statusCode}',
